[workspace]
members = [
  "tools",
  "cadical",
  "kissat",
  "glucose",
  "minisat",
  "ipasir",
  "solvertests",
  "capi",
  "pyapi",
  "batsat",
]
resolver = "2"

[workspace.package]
version = "0.6.6"
license = "MIT"
edition = "2021"

[workspace.dependencies]
anyhow = "1.0.97"
bindgen = "0.71.1"
bzip2 = "0.5.2"
cc = { version = "1.2.17", features = ["parallel"] }
chrono = "0.4.40"
clap = { version = "4.5.32", features = ["derive", "cargo"] }
cmake = "0.1.54"
concolor-clap = "0.1.0"
cpu-time = "1.0.0"
flate2 = { version = "1.1.0", features = ["zlib-ng"], default-features = false }
git2 = "0.20.1"
glob = "0.3.2"
itertools = "0.14.0"
nom = "7.1.3"
termcolor = "1.4.1"
thiserror = "2.0.12"
rand = "0.9.0"
rand_chacha = "0.9.0"
rustc-hash = "2.1.1"
rustsat = { version = "0.6.6", path = "./", default-features = false }
rustsat-cadical = { version = "0.4.6", path = "./cadical" }
rustsat-minisat = { version = "0.4.6", path = "./minisat" }
rustsat-solvertests = { path = "./solvertests" }
rustsat-tools = { version = "0.6.6", path = "./tools" }
serde = { version = "1.0.219", features = ["derive"] }
signal-hook = "0.3.17"
tempfile = "3.19.1"
visibility = "0.1.1"
xz2 = "0.1.7"

[package]
name = "rustsat"
version.workspace = true
edition.workspace = true
authors = ["Christoph Jabs <christoph.jabs@helsinki.fi>"]
license.workspace = true
description = "This library aims to provide implementations of elements commonly used in the development on software in the area of satisfiability solving. The focus of the library is to provide as much ease of use without giving up on performance."
keywords = ["sat", "satisfiability", "encodings"]
repository = "https://github.com/chrjabs/rustsat"
readme = "README.md"
rust-version = "1.74.0" # update the crate documentation if you change this
include = [
  "LICENSE",
  "CHANGELOG.md",
  "README.md",
  "/src/",
  "/examples/",
  "/docs/",
]

[dependencies]
anyhow.workspace = true
cpu-time.workspace = true
nom.workspace = true
thiserror.workspace = true
visibility.workspace = true
bzip2 = { workspace = true, optional = true }
flate2 = { workspace = true, optional = true }
itertools.workspace = true
rand = { workspace = true, optional = true }
rustc-hash = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
tempfile.workspace = true
xz2 = { workspace = true, optional = true }

[dev-dependencies]
clap.workspace = true
concolor-clap.workspace = true
rustsat-minisat.workspace = true
rustsat-solvertests.workspace = true
rustsat-tools.workspace = true
termcolor.workspace = true

[features]
default = ["optimization", "fxhash"]
internals = []
fxhash = ["dep:rustc-hash"]
optimization = []
multiopt = ["optimization"]
compression = ["dep:bzip2", "dep:flate2", "dep:xz2"]
rand = ["dep:rand"]
bench = []
ipasir-display = []
serde = ["dep:serde"]
all = ["multiopt", "compression", "rand", "fxhash", "serde"]

[package.metadata.docs.rs]
features = ["all", "internals"]
rustdoc-args = ["--cfg", "docsrs"]
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]

[[example]]
name = "check-solution"
doc-scrape-examples = true
required-features = ["optimization", "multiopt"]

[[example]]
name = "cnf2opb"
doc-scrape-examples = true

[[example]]
name = "enumerator"
doc-scrape-examples = true

[[example]]
name = "gbmosplit"
doc-scrape-examples = true
required-features = ["optimization"]

[[example]]
name = "mcnf2opb"
doc-scrape-examples = true
required-features = ["multiopt"]

[[example]]
name = "opb2cnf"
doc-scrape-examples = true

[[example]]
name = "opb2mcnf"
doc-scrape-examples = true
required-features = ["multiopt"]

[[example]]
name = "opb2wcnf"
doc-scrape-examples = true
required-features = ["optimization"]

[[example]]
name = "profiling"
doc-scrape-examples = true

[[example]]
name = "print-lits"
doc-scrape-examples = true

[[example]]
name = "shuffledimacs"
doc-scrape-examples = true
required-features = ["optimization", "multiopt"]

[[example]]
name = "wcnf2opb"
doc-scrape-examples = true
required-features = ["optimization"]

[profile.profiling]
inherits = "release"
debug = 1

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(kani)'] }

# temporary workaround for https://github.com/obi1kenobi/cargo-semver-checks/issues/1200
[package.metadata.cargo-semver-checks.lints]
trait_newly_sealed = { level = "allow" }
