name: Release-plz
on:
  push:
    branches: ["main"]
jobs:
  # Release unpublished packages
  # Taken from https://github.com/release-plz/action/blob/main/action.yml and modified to run with nix binaries
  release-plz-release:
    name: Release-plz release
    runs-on: [self-hosted, nix]
    if: ${{ github.repository_owner == 'chrjabs' }}
    permissions:
      contents: write
      id-token: write
    steps:
      # Generating a GitHub token, so that PRs and tags created by
      # the release-plz-action can trigger actions workflows.
      - name: Generate GitHub token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: generate-token
        with:
          app-id: ${{ secrets.RELEASE_PLZ_ID }} # <-- GitHub App ID secret name
          private-key: ${{ secrets.RELEASE_PLZ_PRIVATE_KEY }} # <-- GitHub App private key secret name
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - name: Run release-plz
        run: nix develop ".#releasePlz" --command release-plz release --git-token "${GITHUB_TOKEN}" -o json
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
  # Create a PR with the new versions and changelog, preparing the next release
  release-plz-pr:
    name: Release-plz PR
    runs-on: [self-hosted, nix]
    if: ${{ github.repository_owner == 'chrjabs' }}
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      # Generating a GitHub token, so that PRs and tags created by
      # the release-plz-action can trigger actions workflows.
      - name: Generate GitHub token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: generate-token
        with:
          app-id: ${{ secrets.RELEASE_PLZ_ID }} # <-- GitHub App ID secret name
          private-key: ${{ secrets.RELEASE_PLZ_PRIVATE_KEY }} # <-- GitHub App private key secret name
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}
      - name: Configure git user from GitHub token
        uses: release-plz/git-config@59144859caf016f8b817a2ac9b051578729173c4
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Run release-plz
        id: release-plz
        shell: nix develop ".#releasePlz" --command bash -e {0}
        run: |
          release_pr_output=$(release-plz release-pr\
                  --git-token "${GITHUB_TOKEN}"\
                  --repo-url "https://github.com/${GITHUB_REPOSITORY}"\
                  -o json)
            echo "release_pr_output: $release_pr_output"
            prs=$(echo $release_pr_output | jq -c .prs)
            echo "prs=$prs" >> "$GITHUB_OUTPUT"
            prs_length=$(echo "$prs" | jq 'length')
            if [ "$prs_length" != "0" ]; then
                prs_created=true
                first_pr=$(echo $prs | jq -c .[0])
            else
                prs_created=false
                first_pr="{}"
            fi
            echo "pr=$first_pr" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Update C-API header
        run: |
          set -e

          pr_number=${{ fromJSON(steps.release-plz.outputs.pr).number }}
          if [[ -n "$pr_number" ]]; then
            gh pr checkout "$pr_number"

            scripts/update-capi-header-version.sh

            git commit -am "chore(capi): update version in header"

            git push
          fi
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
