name: CI
on:
  push:
    branches: ["main", "next-major"]
  pull_request:
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUSTDOCFLAGS: -Dwarnings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  ci-everything:
    name: All CI stages
    runs-on: self-hosted
    needs:
      - tests
      - msrv-build
      - wasm-check
      - code-quality
      - python-api
      - doc
      - cadical-each-feature
      - kissat-each-feature
      - cadical-valgrind
      - kissat-valgrind
      - minisat-valgrind
      - glucose-valgrind
      - capi-valgrind
    if: ${{ always() }} # Run this job even if a dependency has failed.
    steps:
      - name: Job outcomes
        run: |
          echo "🧪 Workspace tests: ${{ needs.tests.result }}"
          echo "🏗️ MSRV build: ${{ needs.msrv-build.result }}"
          echo "🏄 WASM check: ${{ needs.wasm-check.result }}"
          echo "✨ Code Quality: ${{ needs.code-quality.result }}"
          echo "🐍 Python API: ${{ needs.python-api.result }}"
          echo "📑 Check documentation: ${{ needs.doc.result }}"
          echo "🧪 CaDiCaL test each feature: ${{ needs.cadical-each-feature.result }}"
          echo "🧪 Kissat test each feature: ${{ needs.kissat-each-feature.result }}"
          echo "🤖 CaDiCaL Valgrind: ${{ needs.cadical-valgrind.result }}"
          echo "🤖 Kissat Valgrind: ${{ needs.kissat-valgrind.result }}"
          echo "🤖 Minisat Valgrind: ${{ needs.minisat-valgrind.result }}"
          echo "🤖 Glucose Valgrind: ${{ needs.glucose-valgrind.result }}"
          echo "🤖 C-API Valgrind: ${{ needs.capi-valgrind.result }}"
      # Fail this required job if any of its dependent jobs have failed.
      #
      # Do not attempt to consolidate these steps into one step, it won't work.
      # Multi-line `if` clauses are not evaluated properly.
      - if: ${{ needs.tests.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.msrv-build.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.wasm-check.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.code-quality.result != 'success' }}
        run: exit 1
      - if: ${{ needs.python-api.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.doc.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.cadical-each-feature.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.kissat-each-feature.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.cadical-valgrind.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.kissat-valgrind.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.minisat-valgrind.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.glucose-valgrind.result == 'failure' }}
        run: exit 1
      - if: ${{ needs.capi-valgrind.result == 'failure' }}
        run: exit 1
  dev-deps:
    name: 🏗️ Dev dependencies
    runs-on: [self-hosted, nix]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🏗️ Build dev dependencies
        run: nix build .#devDeps
  tests:
    name: 🧪 Workspace tests
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: '!github.event.pull_request.draft'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Run tests
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').tests"
      - name: 🧪 Run tests for external solver CaDiCaL
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').externalCadical"
      - name: 🧪 Run tests for external solver Kissat
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').externalKissat"
      - name: 🧪 Run tests for external solver Gimsatul
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').externalGimsatul"
  msrv-build:
    name: 🏗️ MSRV build
    runs-on: [self-hosted, nix]
    if: '!github.event.pull_request.draft'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🏗️ Check MSRV builds
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').msrv"
  wasm-check:
    name: 🏄 WASM check
    runs-on: [self-hosted, nix]
    if: '!github.event.pull_request.draft'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🏄 Check WASM compatibility
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').wasm"
  code-quality:
    name: ✨ Code Quality
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: ✨ Check formatting
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').treefmt"
      - name: ✨ Check typos
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').typos"
      - name: ✨ Check spelling
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').spellcheck"
      - name: ✨ Check generated readmes
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').readmes"
      - name: ✨ Check generated code
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').codegen"
  python-api:
    name: 🐍 Python API
    runs-on: [self-hosted, nix]
    if: '!github.event.pull_request.draft'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: ✨ Build Python API and check
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').pyapi"
  doc:
    name: 📑 Check documentation
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: '!github.event.pull_request.draft'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: ✨ Build doc
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').doc"
      - name: 🧪 Run doc tests
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').docTests"
  coverage:
    name: 📋 Test coverage
    runs-on: [self-hosted, nix]
    needs:
      - tests
      - doc
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: ✨ Collect coverage reports
        run: |
          nix build .#testCoverage
          mkdir -p coverage
          cp result/*.lcov coverage
          rm result
      - name: ✨ Publish to Coveralls
        run: nix run --inputs-from . nur-packages#coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # TODO: Kani
  feature-powerset:
    name: 🔌 Test feature powerset
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'heavy-tests')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: ✨ Run feature powerset checks
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').featurePowerset"
  cadical-each-feature:
    name: 🧪 CaDiCaL test each feature
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/cadical')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Test each feature
        run: nix develop ".#ci" --command cargo hack --each-feature --clean-per-run --exclude-features logging nextest run -p rustsat-cadical
  kissat-each-feature:
    name: 🧪 Kissat test each feature
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/kissat')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Test each feature
        run: nix develop ".#ci" --command cargo hack --each-feature --clean-per-run nextest run -p rustsat-kissat
  cadical-valgrind:
    name: 🤖 CaDiCaL Valgrind
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/cadical')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Tests through valgrind
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').cadicalValgrind"
  kissat-valgrind:
    name: 🤖 Kissat Valgrind
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/kissat')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Tests through valgrind
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').kissatValgrind"
  minisat-valgrind:
    name: 🤖 Minisat Valgrind
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/minisat')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Tests through valgrind
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').minisatValgrind"
  glucose-valgrind:
    name: 🤖 Glucose Valgrind
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/glucose')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Tests through valgrind
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').glucoseValgrind"
  capi-valgrind:
    name: 🤖 C-API Valgrind
    runs-on: [self-hosted, nix]
    needs:
      - dev-deps
    if: "!github.event.pull_request.draft && contains(github.event.pull_request.labels.*.name, 'solvers/capi')"
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: 🧪 Tests through valgrind
        run: nix build ".#checks.$(nix eval --impure --expr 'builtins.currentSystem').capiValgrind"
