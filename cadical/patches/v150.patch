From cc5a76a68bd5f05b0b45c9d335605521228e7d5d Mon Sep 17 00:00:00 2001
From: Christoph Jabs <christoph.jabs@helsinki.fi>
Date: Thu, 18 Apr 2024 15:04:18 +0300
Subject: [PATCH] extend C api

---
 src/cadical.hpp  |  6 ++++
 src/ccadical.cpp | 94 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/ccadical.h   | 24 +++++++++++++
 src/solver.cpp   | 24 +++++++++++++
 4 files changed, 148 insertions(+)

diff --git a/src/cadical.hpp b/src/cadical.hpp
index cbe476d..e5e8a9f 100644
--- a/src/cadical.hpp
+++ b/src/cadical.hpp
@@ -589,6 +589,12 @@ public:
   void phase (int lit);
   void unphase (int lit);
 
+  //------------------------------------------------------------------------
+  // Get some selected statistics
+  int64_t propagations () const;
+  int64_t decisions () const;
+  int64_t conflicts () const;
+
   //------------------------------------------------------------------------
 
   // Enables clausal proof tracing in DRAT format and returns 'true' if
diff --git a/src/ccadical.cpp b/src/ccadical.cpp
index e6e7d28..853d11c 100644
--- a/src/ccadical.cpp
+++ b/src/ccadical.cpp
@@ -177,4 +177,98 @@ int ccadical_frozen (CCaDiCaL * ptr, int lit) {
   return ((Wrapper*) ptr)->solver->frozen (lit);
 }
 
+/*------------------------------------------------------------------------*/
+
+// Extending C API (Christoph Jabs)
+
+int ccadical_add_mem (CCaDiCaL * wrapper, int lit) {
+  try {
+    ((Wrapper*) wrapper)->solver->add (lit);
+    return 0;
+  } catch (std::bad_alloc &) {
+    return OUT_OF_MEM;
+  }
+}
+
+int ccadical_assume_mem (CCaDiCaL * wrapper, int lit) {
+  try {
+    ((Wrapper*) wrapper)->solver->assume (lit);
+    return 0;
+  } catch (std::bad_alloc &) {
+    return OUT_OF_MEM;
+  }
+}
+
+int ccadical_constrain_mem (CCaDiCaL *wrapper, int lit){
+  try {
+    ((Wrapper*) wrapper)->solver->constrain (lit);
+    return 0;
+  } catch (std::bad_alloc &) {
+    return OUT_OF_MEM;
+  }
+}
+
+int ccadical_solve_mem (CCaDiCaL * wrapper) {
+  try {
+    return ((Wrapper*) wrapper)->solver->solve ();
+  } catch (std::bad_alloc &) {
+    return OUT_OF_MEM;
+  }
+}
+
+bool ccadical_configure (CCaDiCaL *ptr, const char *name) {
+  return ((Wrapper *) ptr)->solver->configure (name);
+}
+
+void ccadical_phase (CCaDiCaL *ptr, int lit) {
+  ((Wrapper *) ptr)->solver->phase (lit);
+}
+
+void ccadical_unphase (CCaDiCaL *ptr, int lit) {
+  ((Wrapper *) ptr)->solver->unphase (lit);
+}
+
+int ccadical_vars (CCaDiCaL *ptr) {
+  return ((Wrapper *) ptr)->solver->vars ();
+}
+
+bool ccadical_set_option_ret (CCaDiCaL *wrapper, const char *name,
+                              int val) {
+  return ((Wrapper *) wrapper)->solver->set (name, val);
+}
+
+bool ccadical_limit_ret (CCaDiCaL *wrapper, const char *name, int val) {
+  return ((Wrapper *) wrapper)->solver->limit (name, val);
+}
+
+int64_t ccadical_redundant (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->redundant ();
+}
+
+int ccadical_simplify_rounds (CCaDiCaL *wrapper, int rounds) {
+  return ((Wrapper *) wrapper)->solver->simplify (rounds);
+}
+
+int ccadical_reserve (CCaDiCaL *wrapper, int min_max_var) {
+  try {
+    ((Wrapper *) wrapper)->solver->reserve (min_max_var);
+    return 0;
+  } catch (std::bad_alloc &) {
+    return OUT_OF_MEM;
+  }
+}
+
+int64_t ccadical_propagations (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->propagations ();
+}
+
+int64_t ccadical_decisions (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->decisions ();
+}
+
+int64_t ccadical_conflicts (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->conflicts ();
+}
+
+/*------------------------------------------------------------------------*/
 }
diff --git a/src/ccadical.h b/src/ccadical.h
index 332f842..db41678 100644
--- a/src/ccadical.h
+++ b/src/ccadical.h
@@ -50,6 +50,30 @@ int ccadical_simplify (CCaDiCaL *);
 
 /*------------------------------------------------------------------------*/
 
+// Extending C API (Christoph Jabs)
+
+// This value is returned from _solve_mem, _add_mem, _constrain_mem, and _assume_mem
+const int OUT_OF_MEM = 50;
+
+int ccadical_add_mem (CCaDiCaL *, int lit);
+int ccadical_assume_mem (CCaDiCaL *, int lit);
+int ccadical_constrain_mem (CCaDiCaL *, int lit);
+int ccadical_solve_mem (CCaDiCaL *);
+bool ccadical_configure (CCaDiCaL *, const char *);
+void ccadical_phase (CCaDiCaL *, int lit);
+void ccadical_unphase (CCaDiCaL *, int lit);
+int ccadical_vars (CCaDiCaL *);
+bool ccadical_set_option_ret (CCaDiCaL *, const char *name, int val);
+bool ccadical_limit_ret (CCaDiCaL *, const char *name, int val);
+int64_t ccadical_redundant (CCaDiCaL *);
+int ccadical_simplify_rounds (CCaDiCaL *, int rounds);
+int ccadical_reserve (CCaDiCaL *, int min_max_var);
+int64_t ccadical_propagations (CCaDiCaL *);
+int64_t ccadical_decisions (CCaDiCaL *);
+int64_t ccadical_conflicts (CCaDiCaL *);
+
+/*------------------------------------------------------------------------*/
+
 // Support legacy names used before moving to more IPASIR conforming names.
 
 #define ccadical_reset ccadical_release
diff --git a/src/solver.cpp b/src/solver.cpp
index 31b1610..a079861 100644
--- a/src/solver.cpp
+++ b/src/solver.cpp
@@ -796,6 +796,30 @@ int64_t Solver::irredundant () const {
   return res;
 }
 
+int64_t Solver::propagations () const {
+  TRACE ("propagations");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.propagations.search;
+  LOG_API_CALL_RETURNS ("propagations", res);
+  return res;
+}
+
+int64_t Solver::decisions () const {
+  TRACE ("decisions");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.decisions;
+  LOG_API_CALL_RETURNS ("decisions", res);
+  return res;
+}
+
+int64_t Solver::conflicts () const {
+  TRACE ("conflicts");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.conflicts;
+  LOG_API_CALL_RETURNS ("conflicts", res);
+  return res;
+}
+
 /*------------------------------------------------------------------------*/
 
 void Solver::freeze (int lit) {
-- 
2.44.0

