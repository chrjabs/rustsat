From d68b6ded46632f026f812efc00a23c345083788f Mon Sep 17 00:00:00 2001
From: Christoph Jabs <christoph.jabs@helsinki.fi>
Date: Mon, 18 Dec 2023 10:44:47 +0200
Subject: [PATCH] extend C api

---
 src/cadical.hpp  |  6 +++++
 src/ccadical.cpp | 63 ++++++++++++++++++++++++++++++++++++++++++++++++
 src/ccadical.h   | 19 +++++++++++++++
 src/solver.cpp   | 24 ++++++++++++++++++
 4 files changed, 112 insertions(+)

diff --git a/src/cadical.hpp b/src/cadical.hpp
index a803292..8520e2b 100644
--- a/src/cadical.hpp
+++ b/src/cadical.hpp
@@ -724,6 +724,12 @@ public:
   void phase (int lit);
   void unphase (int lit);
 
+  //------------------------------------------------------------------------
+  // Get some selected statistics
+  int64_t propagations () const;
+  int64_t decisions () const;
+  int64_t conflicts () const;
+
   //------------------------------------------------------------------------
 
   // Enables clausal proof tracing in DRAT format and returns 'true' if
diff --git a/src/ccadical.cpp b/src/ccadical.cpp
index 88ab164..54798d7 100644
--- a/src/ccadical.cpp
+++ b/src/ccadical.cpp
@@ -185,4 +185,67 @@ void ccadical_close_proof (CCaDiCaL *ptr) {
 void ccadical_conclude (CCaDiCaL *ptr) {
   ((Wrapper *) ptr)->solver->conclude ();
 }
+
+/*------------------------------------------------------------------------*/
+
+// Extending C API (Christoph Jabs)
+
+bool ccadical_configure (CCaDiCaL *ptr, const char *name) {
+  return ((Wrapper *) ptr)->solver->configure (name);
+}
+
+void ccadical_phase (CCaDiCaL *ptr, int lit) {
+  ((Wrapper *) ptr)->solver->phase (lit);
+}
+
+void ccadical_unphase (CCaDiCaL *ptr, int lit) {
+  ((Wrapper *) ptr)->solver->unphase (lit);
+}
+
+int ccadical_vars (CCaDiCaL *ptr) {
+  return ((Wrapper *) ptr)->solver->vars ();
+}
+
+bool ccadical_set_option_ret (CCaDiCaL *wrapper, const char *name,
+                              int val) {
+  return ((Wrapper *) wrapper)->solver->set (name, val);
+}
+
+bool ccadical_limit_ret (CCaDiCaL *wrapper, const char *name, int val) {
+  return ((Wrapper *) wrapper)->solver->limit (name, val);
+}
+
+int64_t ccadical_redundant (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->redundant ();
+}
+
+int ccadical_simplify_rounds (CCaDiCaL *wrapper, int rounds) {
+  return ((Wrapper *) wrapper)->solver->simplify (rounds);
+}
+
+void ccadical_reserve (CCaDiCaL *wrapper, int min_max_var) {
+  return ((Wrapper *) wrapper)->solver->reserve (min_max_var);
+}
+
+int64_t ccadical_propagations (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->propagations ();
+}
+
+int64_t ccadical_decisions (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->decisions ();
+}
+
+int64_t ccadical_conflicts (CCaDiCaL *wrapper) {
+  return ((Wrapper *) wrapper)->solver->conflicts ();
+}
+
+bool ccadical_flip (CCaDiCaL *wrapper, int lit) {
+  return ((Wrapper *) wrapper)->solver->flip (lit);
+}
+
+bool ccadical_flippable (CCaDiCaL *wrapper, int lit) {
+  return ((Wrapper *) wrapper)->solver->flippable (lit);
+}
+
+/*------------------------------------------------------------------------*/
 }
diff --git a/src/ccadical.h b/src/ccadical.h
index 6d1b3ff..7f6892b 100644
--- a/src/ccadical.h
+++ b/src/ccadical.h
@@ -54,6 +54,25 @@ int ccadical_simplify (CCaDiCaL *);
 
 /*------------------------------------------------------------------------*/
 
+// Extending C API (Christoph Jabs)
+
+bool ccadical_configure (CCaDiCaL *, const char *);
+void ccadical_phase (CCaDiCaL *, int lit);
+void ccadical_unphase (CCaDiCaL *, int lit);
+int ccadical_vars (CCaDiCaL *);
+bool ccadical_set_option_ret (CCaDiCaL *, const char *name, int val);
+bool ccadical_limit_ret (CCaDiCaL *, const char *name, int val);
+int64_t ccadical_redundant (CCaDiCaL *);
+int ccadical_simplify_rounds (CCaDiCaL *, int rounds);
+void ccadical_reserve (CCaDiCaL *, int min_max_var);
+int64_t ccadical_propagations (CCaDiCaL *);
+int64_t ccadical_decisions (CCaDiCaL *);
+int64_t ccadical_conflicts (CCaDiCaL *);
+bool ccadical_flip (CCaDiCaL *, int lit);
+bool ccadical_flippable (CCaDiCaL *, int lit);
+
+/*------------------------------------------------------------------------*/
+
 // Support legacy names used before moving to more IPASIR conforming names.
 
 #define ccadical_reset ccadical_release
diff --git a/src/solver.cpp b/src/solver.cpp
index a2505ee..b5a375c 100644
--- a/src/solver.cpp
+++ b/src/solver.cpp
@@ -972,6 +972,30 @@ int64_t Solver::irredundant () const {
   return res;
 }
 
+int64_t Solver::propagations () const {
+  TRACE ("propagations");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.propagations.search;
+  LOG_API_CALL_RETURNS ("propagations", res);
+  return res;
+}
+
+int64_t Solver::decisions () const {
+  TRACE ("decisions");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.decisions;
+  LOG_API_CALL_RETURNS ("decisions", res);
+  return res;
+}
+
+int64_t Solver::conflicts () const {
+  TRACE ("conflicts");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.conflicts;
+  LOG_API_CALL_RETURNS ("conflicts", res);
+  return res;
+}
+
 /*------------------------------------------------------------------------*/
 
 void Solver::freeze (int lit) {
-- 
2.43.0

