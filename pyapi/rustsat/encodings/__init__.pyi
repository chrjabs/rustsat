from rustsat import Lit, Cnf, VarManager
from typing import List, final

@final
class Totalizer:
    def __new__(cls, lits: List[Lit]) -> Totalizer: ...
    def extend(self, lits: List[Lit]) -> None: ...
    def n_lits(self) -> int: ...
    def n_clauses(self) -> int: ...
    def n_vars(self) -> int: ...
    def encode_ub(self, max_ub: int, min_ub: int, var_manager: VarManager) -> Cnf: ...
    def enforce_ub(self, ub) -> List[Lit]: ...

@final
class GeneralizedTotalizer:
    def __new__(cls, wlits: List[tuple[int, Lit]]) -> GeneralizedTotalizer: ...
    def extend(self, lits: List[Lit]) -> None: ...
    def weight_sum(self) -> int: ...
    def n_clauses(self) -> int: ...
    def n_vars(self) -> int: ...
    def encode_ub(self, max_ub: int, min_ub: int, var_manager: VarManager) -> Cnf: ...
    def enforce_ub(self, ub) -> List[Lit]: ...

@final
class DynamicPolyWatchdog:
    def __new__(cls, wlits: List[tuple[int, Lit]]) -> DynamicPolyWatchdog: ...
    def weight_sum(self) -> int: ...
    def n_clauses(self) -> int: ...
    def n_vars(self) -> int: ...
    def encode_ub(self, max_ub: int, min_ub: int, var_manager: VarManager) -> Cnf: ...
    def enforce_ub(self, ub) -> List[Lit]: ...
